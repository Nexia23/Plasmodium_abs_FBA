import tellurium as te
import pickle

savepath = '/home/maxim/PhD/malaria_lipid_model/Lipid-Model/Model/model_files/autogenerated/'  # noqa: E501


def set_model_parameters(model_nme: str, params: dict, excluded_values=[]):
    '''
    Function to set model parmeters to value in params dict if not
    in excluded values list. Exports the model as Antimony file
    '''
    model = te.loada(model_nme+'.atm')
    for param_id in params:
        if any(x in param_id for x in excluded_values):
            continue
        else:
            try:
                model[param_id] = params[param_id]
                # print(model[param_id])
            except RuntimeError:
                print('could not set parameter : {0}'.format(param_id))
            except TypeError:
                # print('try to set {0} to {1}'.format(model[param_id]),params[param_id]) # noqa: E501
                print(format(model[param_id]))  #
                print(format(params[param_id]))
    model.exportToAntimony(savepath+model_nme+'.atm')
    return print(model_nme+' updated')


def get_para_to_fit_lst(key: str):
    '''
    Function to get the parameters that are to be fitted.
    '''

    para_dic = {'volmue': ['t', 'Vmax', 'Vmin', 't12', 's'],
                'pc_path': ['cmax_ECholine_in', 'cmin_ECholine_in',
                            't12_ECholine_in', 's_ECholine_in', 'cmax_E2_7_1_32',
                            'cmin_E2_7_1_32', 't12_E2_7_1_32', 's_E2_7_1_32',
                            'cmax_E2_7_7_15', 'cmin_E2_7_7_15', 't12_E2_7_7_15',
                            's_E2_7_7_15', 'cmax_E2_7_8_2', 'cmin_E2_7_8_2',
                            't12_E2_7_8_2', 's_E2_7_8_2', 'cmax_EPC_mem',
                            'cmin_EPC_mem', 't12_EPC_mem', 's_EPC_mem',
                            'k_Choline_in', 'k_R01021', 'k_R01890', 'k_R01321',
                            'k_TransportPC'],
                'pc_pe_path': ['cmax_EPE_mem', 'km_Ethanolamine_R01468',
                               't12_E2_7_1_82', 'k_EtOHamine_in', 'k_R02057',
                               't12_E3_1_4_3', 't12_E2_1_1_103', 'vmax_R02037',
                               's_EEtOHamine_in', 't12_EEtOHamine_in',
                               'k_R02038', 'k_TransportPE', 'cmax_E2_7_1_82',
                               'km_Ethanolamine_phosphate_R02037', 'cmax_E3_1_4_3',
                               'km_S_Adenosyl_L_methionine_R02037', 'cmin_EPE_mem',
                               'k_R01468', 't12_E2_7_7_14', 'k_R02052',
                               'kcat_S_Adenosyl_L_methionine_R06869', 's_E2_7_1_82',
                               'k_R01021', 'cmin_EEtOHamine_in', 's_E2_1_1_103'
                               'km_Phosphodimethylethanolamine_R06869',
                               'cmax_E2_1_1_103', 't12_E2_7_1_32', 's_EPE_mem',
                               'cmin_E2_7_8_1', 'cmax_EEtOHamine_in', 'cmax_E2_7_1_32',
                               'cmin_E2_7_1_82', 'cmin_E2_1_1_103', 'k_R01312'
                               'km_Ethanolamine_phosphate_R02038',
                               's_E2_7_1_32', 's_E2_7_7_14', 'cmin_E3_1_4_3',
                               'kcat_N_Methylethanolamine_phosphate_R06868',
                               'kcat_S_Adenosyl_L_methionine_R02037',
                               'km_S_Adenosyl_L_methionine_R06869', 'cmax_E2_7_7_14',
                               'cmin_E2_7_1_32', 'k_R06868', 't12_EPE_mem',
                               'cmin_E2_7_7_14', 's_E3_1_4_3', 'vmax_R06869',
                               'cmax_E2_7_8_1', 's_E2_7_8_1', 't12_E2_7_8_1',
                               'km_N_Methylethanolamine_phosphate_R06868'],
                'PLModel': ['cmin_E4_1_1_65', 's_EL_Serine_in', 's_EPS_mem',
                            'cmax_E2_7_7_41', 'cmin_EL_Serine_in', 'k_R02055',
                            'cmax_EL_Serine_in', 't12_E2_7_8_8b',
                            'cmin_E2_7_7_41', 's_E2_7_7_41', 'cmin_E4_1_1',
                            'k_Serine_to_EtOHamine', 'cmin_EPS_mem',
                            'cmax_E3_1_3_4', 'cmax_E4_1_1', 't12_E4_1_1_65',
                            's_E3_1_3_4', 'cmin_E2_7_8_8b', 't12_E2_7_1_107',
                            's_E2_7_8_8b', 'cmax_E2_7_1_107', 'cmax_EPS_mem',
                            't12_E4_1_1', 'k_PSSbe', 's_E4_1_1_65',
                            't12_EL_Serine_in', 'cmin_E2_7_1_107', 't12_EPS_mem',
                            't12_E2_7_7_41', 'cmax_E4_1_1_65', 'k_L_Serine_in',
                            'cmin_E3_1_3_4', 's_E2_7_1_107', 'k_TransportPS',
                            't12_E3_1_3_4', 'cmax_E2_7_8_8b', 's_E4_1_1']
                }
    return para_dic[key].values()


def get_para_dict(key):
    '''
    Function to get parameter dic of last optimiztion
    returns this dict
    '''
    paths = {'cPL_conc': '/home/maxim/PhD/malaria_lipid_model/Lipid-Model/Model/Estimation/CMA_ES_files/cPL_conc/whole_paras.txt',  # noqa: E501
             'pc_pePL': '/home/maxim/PhD/malaria_lipid_model/Lipid-Model/Model/Estimation/CMA_ES_files/pc_pePL/whole_paras.txt',  # noqa: E501
             'PLModel': '/home/maxim/PhD/malaria_lipid_model/Lipid-Model/Model/Estimation/CMA_ES_files/no_Ser_to_PS_PL/whole_paras.txt',   # noqa: E501
             }
    with open(paths.get(key), 'rb') as g:
        para_dic = pickle.loads(g.read())

    return para_dic


def to_update(key: str):
    '''
    Function to find index of key in the models list, since every following
    entry will be updated
    '''
    models = ['cPL_conc', 'pc_pePL', 'PLModel']
    index = models.index(key)

    if index >= len(models):
        print('Nothing to update')
        exit()

    return models[index+1:]


def autoupdate(key):
    '''
    Function to run the update process form given key
    '''
    models = to_update(key)
    parameter_dict = get_para_dict(key)

    for model in models:
        set_model_parameters(model, parameter_dict)
    return


if __name__ == '__main__':
    key = str(input('New parameters for model:'))
    print('Other models will be updated')

    autoupdate(key)
